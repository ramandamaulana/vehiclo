{"remainingRequest":"D:\\0.MAGANG\\Vehiclo\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\0.MAGANG\\Vehiclo\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\0.MAGANG\\Vehiclo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0.MAGANG\\Vehiclo\\src\\components\\Konten.vue?vue&type=template&id=c3fe7dfa&","dependencies":[{"path":"D:\\0.MAGANG\\Vehiclo\\src\\components\\Konten.vue","mtime":1605479448988},{"path":"D:\\0.MAGANG\\Vehiclo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0.MAGANG\\Vehiclo\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\0.MAGANG\\Vehiclo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0.MAGANG\\Vehiclo\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}